3600
s:43253:"<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<title>Arr | Kohana User Guide</title>

<link type="text/css" href="/3.2/guide/media/css/print.css" rel="stylesheet" media="print" />
<link type="text/css" href="/3.2/guide/media/css/screen.css" rel="stylesheet" media="screen" />
<link type="text/css" href="/3.2/guide/media/css/kodoc.css" rel="stylesheet" media="screen" />
<link type="text/css" href="/3.2/guide/media/css/shCore.css" rel="stylesheet" media="screen" />
<link type="text/css" href="/3.2/guide/media/css/shThemeKodoc.css" rel="stylesheet" media="screen" />

<script type="text/javascript" src="/3.2/guide/media/js/jquery.min.js"></script>
<script type="text/javascript" src="/3.2/guide/media/js/jquery.cookie.js"></script>
<script type="text/javascript" src="/3.2/guide/media/js/kodoc.js"></script>
<script type="text/javascript" src="/3.2/guide/media/js/shCore.js"></script>
<script type="text/javascript" src="/3.2/guide/media/js/shBrushPhp.js"></script>

<!--[if lt IE 9]>
<script src="http://ie7-js.googlecode.com/svn/version/2.1(beta4)/IE9.js"></script>
<![endif]-->
</head>
<body>

	<div id="header">
		<div class="container">
			<a href="http://kohanaframework.org/" id="logo">
				<img src="/3.2/guide/media/img/kohana.png" />
			</a>
			<div id="menu">
				<ul>
					<li class="guide first">
						<a href="/3.2/guide">User Guide</a>
					</li>
					<li class="api">
						<a href="/3.2/guide/api">API Browser</a>
					</li>
				</ul>
			</div>
		</div>
	</div>

	<div id="content">
		<div class="wrapper">
			<div class="container">
				<div class="span-22 prefix-1 suffix-1">
					<ul id="breadcrumb">
																				<li><a href="/3.2/guide">User Guide</a></li>
																											<li><a href="/3.2/guide/api">API Browser</a></li>
																											<li class="last">Arr</li>
																		</ul>
				</div>
				<div class="span-6 prefix-1">
					<div id="topics">
						
<h2>Modules</h2>
<ol class="menu">
<li><span><strong>Kohana</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Debug">Debug</a></li>
							<li><a href="/3.2/guide/api/HTTP_Cache">HTTP_Cache</a></li>
							<li><a href="/3.2/guide/api/I18n">I18n</a></li>
							<li><a href="/3.2/guide/api/Kohana">Kohana</a></li>
							<li><a href="/3.2/guide/api/Kohana_Config_Writer">Kohana_Config_Writer</a></li>
							<li><a href="/3.2/guide/api/Kohana_Core">Kohana_Core</a></li>
							<li><a href="/3.2/guide/api/Request">Request</a></li>
							<li><a href="/3.2/guide/api/Request_Client">Request_Client</a></li>
							<li><a href="/3.2/guide/api/Request_Client_Curl">Request_Client_Curl</a></li>
							<li><a href="/3.2/guide/api/Request_Client_External">Request_Client_External</a></li>
							<li><a href="/3.2/guide/api/Request_Client_HTTP">Request_Client_HTTP</a></li>
							<li><a href="/3.2/guide/api/Request_Client_Internal">Request_Client_Internal</a></li>
							<li><a href="/3.2/guide/api/Request_Client_Stream">Request_Client_Stream</a></li>
							<li><a href="/3.2/guide/api/Response">Response</a></li>
							<li><a href="/3.2/guide/api/Route">Route</a></li>
							<li><a href="/3.2/guide/api/UTF8">UTF8</a></li>
							<li><a href="/3.2/guide/api/View">View</a></li>
								</li>
			<li><span>Configuration</span>
			<ol>							<li><a href="/3.2/guide/api/Config">Config</a></li>
							<li><a href="/3.2/guide/api/Config_File">Config_File</a></li>
							<li><a href="/3.2/guide/api/Config_Group">Config_Group</a></li>
							<li><a href="/3.2/guide/api/Kohana_Config_File_Reader">Kohana_Config_File_Reader</a></li>
							<li><a href="/3.2/guide/api/Kohana_Config_Reader">Kohana_Config_Reader</a></li>
							<li><a href="/3.2/guide/api/Kohana_Config_Source">Kohana_Config_Source</a></li>
						</ol>		</li>
			<li><span>Controller</span>
			<ol>							<li><a href="/3.2/guide/api/Controller">Controller</a></li>
							<li><a href="/3.2/guide/api/Controller_Template">Controller_Template</a></li>
							<li><a href="/3.2/guide/api/Controller_Welcome">Controller_Welcome</a></li>
						</ol>		</li>
			<li><span>Exceptions</span>
			<ol>							<li><a href="/3.2/guide/api/HTTP_Exception">HTTP_Exception</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_400">HTTP_Exception_400</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_401">HTTP_Exception_401</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_402">HTTP_Exception_402</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_403">HTTP_Exception_403</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_404">HTTP_Exception_404</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_405">HTTP_Exception_405</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_406">HTTP_Exception_406</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_407">HTTP_Exception_407</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_408">HTTP_Exception_408</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_409">HTTP_Exception_409</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_410">HTTP_Exception_410</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_411">HTTP_Exception_411</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_412">HTTP_Exception_412</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_413">HTTP_Exception_413</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_414">HTTP_Exception_414</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_415">HTTP_Exception_415</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_416">HTTP_Exception_416</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_417">HTTP_Exception_417</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_500">HTTP_Exception_500</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_501">HTTP_Exception_501</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_502">HTTP_Exception_502</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_503">HTTP_Exception_503</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_504">HTTP_Exception_504</a></li>
							<li><a href="/3.2/guide/api/HTTP_Exception_505">HTTP_Exception_505</a></li>
							<li><a href="/3.2/guide/api/Kohana_Exception">Kohana_Exception</a></li>
							<li><a href="/3.2/guide/api/Request_Exception">Request_Exception</a></li>
							<li><a href="/3.2/guide/api/Session_Exception">Session_Exception</a></li>
							<li><a href="/3.2/guide/api/UTF8_Exception">UTF8_Exception</a></li>
							<li><a href="/3.2/guide/api/Validation_Exception">Validation_Exception</a></li>
							<li><a href="/3.2/guide/api/View_Exception">View_Exception</a></li>
						</ol>		</li>
			<li><span>HTTP</span>
			<ol>							<li><a href="/3.2/guide/api/HTTP">HTTP</a></li>
							<li><a href="/3.2/guide/api/HTTP_Header">HTTP_Header</a></li>
							<li><a href="/3.2/guide/api/HTTP_Message">HTTP_Message</a></li>
							<li><a href="/3.2/guide/api/HTTP_Request">HTTP_Request</a></li>
							<li><a href="/3.2/guide/api/HTTP_Response">HTTP_Response</a></li>
						</ol>		</li>
			<li><span>Helpers</span>
			<ol>							<li><a href="/3.2/guide/api/Arr">Arr</a></li>
							<li><a href="/3.2/guide/api/CLI">CLI</a></li>
							<li><a href="/3.2/guide/api/Cookie">Cookie</a></li>
							<li><a href="/3.2/guide/api/Date">Date</a></li>
							<li><a href="/3.2/guide/api/Feed">Feed</a></li>
							<li><a href="/3.2/guide/api/File">File</a></li>
							<li><a href="/3.2/guide/api/Form">Form</a></li>
							<li><a href="/3.2/guide/api/Fragment">Fragment</a></li>
							<li><a href="/3.2/guide/api/HTML">HTML</a></li>
							<li><a href="/3.2/guide/api/Inflector">Inflector</a></li>
							<li><a href="/3.2/guide/api/Num">Num</a></li>
							<li><a href="/3.2/guide/api/Profiler">Profiler</a></li>
							<li><a href="/3.2/guide/api/Text">Text</a></li>
							<li><a href="/3.2/guide/api/URL">URL</a></li>
							<li><a href="/3.2/guide/api/Upload">Upload</a></li>
						</ol>		</li>
			<li><span>Logging</span>
			<ol>							<li><a href="/3.2/guide/api/Log">Log</a></li>
							<li><a href="/3.2/guide/api/Log_File">Log_File</a></li>
							<li><a href="/3.2/guide/api/Log_StdErr">Log_StdErr</a></li>
							<li><a href="/3.2/guide/api/Log_StdOut">Log_StdOut</a></li>
							<li><a href="/3.2/guide/api/Log_Syslog">Log_Syslog</a></li>
							<li><a href="/3.2/guide/api/Log_Writer">Log_Writer</a></li>
						</ol>		</li>
			<li><span>Models</span>
			<ol>							<li><a href="/3.2/guide/api/Model">Model</a></li>
						</ol>		</li>
			<li><span>Security</span>
			<ol>							<li><a href="/3.2/guide/api/Encrypt">Encrypt</a></li>
							<li><a href="/3.2/guide/api/Security">Security</a></li>
							<li><a href="/3.2/guide/api/Valid">Valid</a></li>
							<li><a href="/3.2/guide/api/Validation">Validation</a></li>
						</ol>		</li>
			<li><span>Session</span>
			<ol>							<li><a href="/3.2/guide/api/Session">Session</a></li>
							<li><a href="/3.2/guide/api/Session_Cookie">Session_Cookie</a></li>
							<li><a href="/3.2/guide/api/Session_Native">Session_Native</a></li>
						</ol>		</li>
		</ol>
<li><span><strong>Kohana/Auth</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Auth">Auth</a></li>
							<li><a href="/3.2/guide/api/Auth_File">Auth_File</a></li>
							<li><a href="/3.2/guide/api/Auth_ORM">Auth_ORM</a></li>
							<li><a href="/3.2/guide/api/Model_Auth_Role">Model_Auth_Role</a></li>
							<li><a href="/3.2/guide/api/Model_Auth_User">Model_Auth_User</a></li>
							<li><a href="/3.2/guide/api/Model_Auth_User_Token">Model_Auth_User_Token</a></li>
							<li><a href="/3.2/guide/api/Model_Role">Model_Role</a></li>
							<li><a href="/3.2/guide/api/Model_User">Model_User</a></li>
							<li><a href="/3.2/guide/api/Model_User_Token">Model_User_Token</a></li>
								</li>
		</ol>
<li><span><strong>Kohana/Cache</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Cache">Cache</a></li>
							<li><a href="/3.2/guide/api/Cache_Apc">Cache_Apc</a></li>
							<li><a href="/3.2/guide/api/Cache_Arithmetic">Cache_Arithmetic</a></li>
							<li><a href="/3.2/guide/api/Cache_Exception">Cache_Exception</a></li>
							<li><a href="/3.2/guide/api/Cache_File">Cache_File</a></li>
							<li><a href="/3.2/guide/api/Cache_GarbageCollect">Cache_GarbageCollect</a></li>
							<li><a href="/3.2/guide/api/Cache_Memcache">Cache_Memcache</a></li>
							<li><a href="/3.2/guide/api/Cache_MemcacheTag">Cache_MemcacheTag</a></li>
							<li><a href="/3.2/guide/api/Cache_Sqlite">Cache_Sqlite</a></li>
							<li><a href="/3.2/guide/api/Cache_Tagging">Cache_Tagging</a></li>
							<li><a href="/3.2/guide/api/Cache_Wincache">Cache_Wincache</a></li>
								</li>
		</ol>
<li><span><strong>Kohana/Codebench</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Codebench">Codebench</a></li>
								</li>
			<li><span>Controllers</span>
			<ol>							<li><a href="/3.2/guide/api/Controller_Codebench">Controller_Codebench</a></li>
						</ol>		</li>
			<li><span>Tests</span>
			<ol>							<li><a href="/3.2/guide/api/Bench_ArrCallback">Bench_ArrCallback</a></li>
							<li><a href="/3.2/guide/api/Bench_AutoLinkEmails">Bench_AutoLinkEmails</a></li>
							<li><a href="/3.2/guide/api/Bench_DateSpan">Bench_DateSpan</a></li>
							<li><a href="/3.2/guide/api/Bench_ExplodeLimit">Bench_ExplodeLimit</a></li>
							<li><a href="/3.2/guide/api/Bench_GruberURL">Bench_GruberURL</a></li>
							<li><a href="/3.2/guide/api/Bench_LtrimDigits">Bench_LtrimDigits</a></li>
							<li><a href="/3.2/guide/api/Bench_MDDoBaseURL">Bench_MDDoBaseURL</a></li>
							<li><a href="/3.2/guide/api/Bench_MDDoImageURL">Bench_MDDoImageURL</a></li>
							<li><a href="/3.2/guide/api/Bench_MDDoIncludeViews">Bench_MDDoIncludeViews</a></li>
							<li><a href="/3.2/guide/api/Bench_StripNullBytes">Bench_StripNullBytes</a></li>
							<li><a href="/3.2/guide/api/Bench_Transliterate">Bench_Transliterate</a></li>
							<li><a href="/3.2/guide/api/Bench_URLSite">Bench_URLSite</a></li>
							<li><a href="/3.2/guide/api/Bench_UserFuncArray">Bench_UserFuncArray</a></li>
							<li><a href="/3.2/guide/api/Bench_ValidColor">Bench_ValidColor</a></li>
							<li><a href="/3.2/guide/api/Bench_ValidURL">Bench_ValidURL</a></li>
						</ol>		</li>
		</ol>
<li><span><strong>Kohana/Database</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/DB">DB</a></li>
							<li><a href="/3.2/guide/api/Database">Database</a></li>
							<li><a href="/3.2/guide/api/Database_Expression">Database_Expression</a></li>
								</li>
			<li><span>Configuration</span>
			<ol>							<li><a href="/3.2/guide/api/Config_Database">Config_Database</a></li>
							<li><a href="/3.2/guide/api/Config_Database_Reader">Config_Database_Reader</a></li>
							<li><a href="/3.2/guide/api/Config_Database_Writer">Config_Database_Writer</a></li>
						</ol>		</li>
			<li><span>Drivers</span>
			<ol>							<li><a href="/3.2/guide/api/Database_MySQL">Database_MySQL</a></li>
							<li><a href="/3.2/guide/api/Database_PDO">Database_PDO</a></li>
						</ol>		</li>
			<li><span>Exceptions</span>
			<ol>							<li><a href="/3.2/guide/api/Database_Exception">Database_Exception</a></li>
						</ol>		</li>
			<li><span>Models</span>
			<ol>							<li><a href="/3.2/guide/api/Model_Database">Model_Database</a></li>
						</ol>		</li>
			<li><span>Query</span>
			<ol>							<li><a href="/3.2/guide/api/Database_Query">Database_Query</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder">Database_Query_Builder</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Delete">Database_Query_Builder_Delete</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Insert">Database_Query_Builder_Insert</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Join">Database_Query_Builder_Join</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Select">Database_Query_Builder_Select</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Update">Database_Query_Builder_Update</a></li>
							<li><a href="/3.2/guide/api/Database_Query_Builder_Where">Database_Query_Builder_Where</a></li>
						</ol>		</li>
			<li><span>Query/Result</span>
			<ol>							<li><a href="/3.2/guide/api/Database_MySQL_Result">Database_MySQL_Result</a></li>
							<li><a href="/3.2/guide/api/Database_Result">Database_Result</a></li>
							<li><a href="/3.2/guide/api/Database_Result_Cached">Database_Result_Cached</a></li>
						</ol>		</li>
			<li><span>Session</span>
			<ol>							<li><a href="/3.2/guide/api/Session_Database">Session_Database</a></li>
						</ol>		</li>
		</ol>
<li><span><strong>Kohana/Image</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Image">Image</a></li>
								</li>
			<li><span>Drivers</span>
			<ol>							<li><a href="/3.2/guide/api/Image_GD">Image_GD</a></li>
							<li><a href="/3.2/guide/api/Image_Imagick">Image_Imagick</a></li>
						</ol>		</li>
		</ol>
<li><span><strong>Kohana/ORM</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/ORM">ORM</a></li>
							<li><a href="/3.2/guide/api/ORM_Validation_Exception">ORM_Validation_Exception</a></li>
								</li>
		</ol>
<li><span><strong>Kohana/UnitTest</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Unittest_Database_TestCase">Unittest_Database_TestCase</a></li>
							<li><a href="/3.2/guide/api/Unittest_Tests">Unittest_Tests</a></li>
								</li>
		</ol>
<li><span><strong>Kohana/Userguide</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Kodoc">Kodoc</a></li>
							<li><a href="/3.2/guide/api/Kodoc_Class">Kodoc_Class</a></li>
							<li><a href="/3.2/guide/api/Kodoc_Markdown">Kodoc_Markdown</a></li>
							<li><a href="/3.2/guide/api/Kodoc_Method">Kodoc_Method</a></li>
							<li><a href="/3.2/guide/api/Kodoc_Method_Param">Kodoc_Method_Param</a></li>
							<li><a href="/3.2/guide/api/Kodoc_Property">Kodoc_Property</a></li>
								</li>
			<li><span>Controllers</span>
			<ol>							<li><a href="/3.2/guide/api/Controller_Userguide">Controller_Userguide</a></li>
						</ol>		</li>
			<li><span>Undocumented</span>
			<ol>							<li><a href="/3.2/guide/api/Kodoc_Missing">Kodoc_Missing</a></li>
						</ol>		</li>
		</ol>
<li><span><strong>[Unknown]</strong></span>
	<ol>
			<li>							<li><a href="/3.2/guide/api/Unittest_Helpers">Unittest_Helpers</a></li>
							<li><a href="/3.2/guide/api/Unittest_TestCase">Unittest_TestCase</a></li>
								</li>
		</ol>
</ol>					</div>
				</div>
				<div id="body" class="span-16 suffix-1 last">
					<h1>
	Arr		<br/><small>extends <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a></small>
	</h1>

<p>Array helper.</p>

<dl class="tags">
<dt>package</dt>
<dd>Kohana</dd>
<dt>category</dt>
<dd>Helpers</dd>
<dt>author</dt>
<dd>Kohana Team</dd>
<dt>copyright</dt>
<dd>&copy; 2007-2011 Kohana Team</dd>
<dt>license</dt>
<dd><a href="http://kohanaframework.org/license">http://kohanaframework.org/license</a></dd>
</dl>

<p class="note">
Class declared in <tt>SYSPATH/classes/arr.php</tt> on line 3.
</p>

<div class="toc">
	<div class="constants">
		<h3>Constants</h3>
		<ul>
					<li><em>None</em></li>
				</ul>
	</div>
	<div class="properties">
		<h3>Properties</h3>
		<ul>
							<li><a href="#property:delimiter">$delimiter</a></li>
						</ul>
	</div>
	<div class="methods">
		<h3>Methods</h3>
		<ul>
							<li><a href="#callback">callback()</a></li>
					<li><a href="#extract">extract()</a></li>
					<li><a href="#flatten">flatten()</a></li>
					<li><a href="#get">get()</a></li>
					<li><a href="#is_array">is_array()</a></li>
					<li><a href="#is_assoc">is_assoc()</a></li>
					<li><a href="#map">map()</a></li>
					<li><a href="#merge">merge()</a></li>
					<li><a href="#overwrite">overwrite()</a></li>
					<li><a href="#path">path()</a></li>
					<li><a href="#pluck">pluck()</a></li>
					<li><a href="#range">range()</a></li>
					<li><a href="#set_path">set_path()</a></li>
					<li><a href="#unshift">unshift()</a></li>
						</ul>
	</div>
</div>

<div class="clearfix"></div>


<h1 id="properties">Properties</h1>
<div class="properties">
<dl>
<dt><h4 id="property:delimiter"><small>public static</small>  <code>string</code> $delimiter</h4></dt>
<dd><p>default delimiter for path()</p>
</dd>
<dd><pre class="debug"><small>string</small><span>(1)</span> "."</pre></dd>
</dl>
</div>

<h1 id="methods">Methods</h1>
<div class="methods">
<div class="method">

<h3 id="callback">
	<small>public static</small> callback( <small>string</small> <span class="param" title="Callback string">$str</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Creates a callable function and parameter list from a string representation.
Note that this function does not validate the callback string.</p>

<pre><code>// Get the callback function and parameters
list($func, $params) = Arr::callback('Foo::bar(apple,orange)');

// Get the result of the callback
$result = call_user_func_array($func, $params);
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>string</code>
<strong>$str</strong>
<small>required</small> - Callback string</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code> - Function, params</li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function callback($str)
{
	// Overloaded as parts are found
	$command = $params = NULL;

	// command[param,param]
	if (preg_match(&#039;/^([^\(]*+)\((.*)\)$/&#039;, $str, $match))
	{
		// command
		$command = $match[1];

		if ($match[2] !== &#039;&#039;)
		{
			// param,param
			$params = preg_split(&#039;/(?&lt;!\\\\),/&#039;, $match[2]);
			$params = str_replace(&#039;\,&#039;, &#039;,&#039;, $params);
		}
	}
	else
	{
		// command
		$command = $str;
	}

	if (strpos($command, &#039;::&#039;) !== FALSE)
	{
		// Create a static method callable command
		$command = explode(&#039;::&#039;, $command, 2);
	}

	return array($command, $params);
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="extract">
	<small>public static</small> extract( <small>array</small> <span class="param" title="Array to extract keys from">$array</span> , <small>array</small> <span class="param" title="List of key names">$keys</span> [, <small>mixed</small> <span class="param" title="Default value">$default</span> <small>= <small>NULL</small></small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Retrieves multiple keys from an array. If the key does not exist in the
array, the default value will be added instead.</p>

<pre><code>// Get the values "username", "password" from $_POST
$auth = Arr::extract($_POST, array('username', 'password'));
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to extract keys from</li>
<li>
<code>array</code>
<strong>$keys</strong>
<small>required</small> - List of key names</li>
<li>
<code>mixed</code>
<strong>$default</strong>
<small> = <small>NULL</small></small> - Default value</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function extract($array, array $keys, $default = NULL)
{
	$found = array();
	foreach ($keys as $key)
	{
		$found[$key] = isset($array[$key]) ? $array[$key] : $default;
	}

	return $found;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="flatten">
	<small>public static</small> flatten( <small>array</small> <span class="param" title="Array to flatten">$array</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Convert a multi-dimensional array into a single-dimensional array.</p>

<pre><code>$array = array('set' =&gt; array('one' =&gt; 'something'), 'two' =&gt; 'other');

// Flatten the array
$array = Arr::flatten($array);

// The array will now be
array('one' =&gt; 'something', 'two' =&gt; 'other');
</code></pre>

<p class="note">The keys of array values will be discarded.</p>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to flatten</li>
</ul>

<h4>Tags</h4>
<ul class="tags">
<li>Since - 3.0.6</ul>
<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function flatten($array)
{
	$flat = array();
	foreach ($array as $key =&gt; $value)
	{
		if (is_array($value))
		{
			$flat += Arr::flatten($value);
		}
		else
		{
			$flat[$key] = $value;
		}
	}
	return $flat;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="get">
	<small>public static</small> get( <small>array</small> <span class="param" title="Array to extract from">$array</span> , <small>string</small> <span class="param" title="Key name">$key</span> [, <small>mixed</small> <span class="param" title="Default value">$default</span> <small>= <small>NULL</small></small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Retrieve a single key from an array. If the key does not exist in the
array, the default value will be returned instead.</p>

<pre><code>// Get the value "username" from $_POST, if it exists
$username = Arr::get($_POST, 'username');

// Get the value "sorting" from $_GET, if it exists
$sorting = Arr::get($_GET, 'sorting');
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to extract from</li>
<li>
<code>string</code>
<strong>$key</strong>
<small>required</small> - Key name</li>
<li>
<code>mixed</code>
<strong>$default</strong>
<small> = <small>NULL</small></small> - Default value</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>mixed</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function get($array, $key, $default = NULL)
{
	return isset($array[$key]) ? $array[$key] : $default;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="is_array">
	<small>public static</small> is_array( <small>mixed</small> <span class="param" title="Value to check">$value</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Test if a value is an array with an additional check for array-like objects.</p>

<pre><code>// Returns TRUE
Arr::is_array(array());
Arr::is_array(new ArrayObject);

// Returns FALSE
Arr::is_array(FALSE);
Arr::is_array('not an array!');
Arr::is_array(Database::instance());
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>mixed</code>
<strong>$value</strong>
<small>required</small> - Value to check</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>boolean</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function is_array($value)
{
	if (is_array($value))
	{
		// Definitely an array
		return TRUE;
	}
	else
	{
		// Possibly a Traversable object, functionally the same as an array
		return (is_object($value) AND $value instanceof Traversable);
	}
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="is_assoc">
	<small>public static</small> is_assoc( <small>array</small> <span class="param" title="Array to check">$array</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Tests if an array is associative or not.</p>

<pre><code>// Returns TRUE
Arr::is_assoc(array('username' =&gt; 'john.doe'));

// Returns FALSE
Arr::is_assoc('foo', 'bar');
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to check</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>boolean</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function is_assoc(array $array)
{
	// Keys of the array
	$keys = array_keys($array);

	// If the array keys of the keys match the keys, then the array must
	// not be associative (e.g. the keys array looked like {0:0, 1:1...}).
	return array_keys($keys) !== $keys;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="map">
	<small>public static</small> map( <small>mixed</small> <span class="param" title="Callback applied to every element in the array">$callback</span> , <small>array</small> <span class="param" title="Array to map">$array</span> [, <small>array</small> <span class="param" title="Array of keys to apply to">$keys</span> <small>= <small>NULL</small></small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Recursive version of <a href="http://php.net/array_map">array_map</a>, applies the
same callback to all elements in an array, including sub-arrays.</p>

<pre><code>// Apply "strip_tags" to every element in the array
$array = Arr::map('strip_tags', $array);
</code></pre>

<p class="note">Unlike <code>array_map</code>, this method requires a callback and will only map
a single array.</p>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>mixed</code>
<strong>$callback</strong>
<small>required</small> - Callback applied to every element in the array</li>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to map</li>
<li>
<code>array</code>
<strong>$keys</strong>
<small> = <small>NULL</small></small> - Array of keys to apply to</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function map($callback, $array, $keys = NULL)
{
	foreach ($array as $key =&gt; $val)
	{
		if (is_array($val))
		{
			$array[$key] = Arr::map($callback, $array[$key]);
		}
		elseif ( ! is_array($keys) or in_array($key, $keys))
		{
			if (is_array($callback))
			{
				foreach ($callback as $cb)
				{
					$array[$key] = call_user_func($cb, $array[$key]);
				}
			}
			else
			{
				$array[$key] = call_user_func($callback, $array[$key]);
			}
		}
	}

	return $array;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="merge">
	<small>public static</small> merge( <small>array</small> <span class="param" title="Initial array">$a1</span> , <small>array</small> <span class="param" title="Array to merge">$a2</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Merges one or more arrays recursively and preserves all keys.
Note that this does not work the same as <a href="http://php.net/array_merge_recursive">array_merge_recursive</a>!</p>

<pre><code>$john = array('name' =&gt; 'john', 'children' =&gt; array('fred', 'paul', 'sally', 'jane'));
$mary = array('name' =&gt; 'mary', 'children' =&gt; array('jane'));

// John and Mary are married, merge them together
$john = Arr::merge($john, $mary);

// The output of $john will now be:
array('name' =&gt; 'mary', 'children' =&gt; array('fred', 'paul', 'sally', 'jane'))
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$a1</strong>
<small>required</small> - Initial array</li>
<li>
<code>array</code>
<strong>$a2</strong>
<small>required</small> - Array to merge</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function merge(array $a1, array $a2)
{
	$result = array();
	for ($i = 0, $total = func_num_args(); $i &lt; $total; $i++)
	{
		// Get the next array
		$arr = func_get_arg($i);

		// Is the array associative?
		$assoc = Arr::is_assoc($arr);

		foreach ($arr as $key =&gt; $val)
		{
			if (isset($result[$key]))
			{
				if (is_array($val) AND is_array($result[$key]))
				{
					if (Arr::is_assoc($val))
					{
						// Associative arrays are merged recursively
						$result[$key] = Arr::merge($result[$key], $val);
					}
					else
					{
						// Find the values that are not already present
						$diff = array_diff($val, $result[$key]);

						// Indexed arrays are merged to prevent duplicates
						$result[$key] = array_merge($result[$key], $diff);
					}
				}
				else
				{
					if ($assoc)
					{
						// Associative values are replaced
						$result[$key] = $val;
					}
					elseif ( ! in_array($val, $result, TRUE))
					{
						// Indexed values are added only if they do not yet exist
						$result[] = $val;
					}
				}
			}
			else
			{
				// New values are added
				$result[$key] = $val;
			}
		}
	}

	return $result;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="overwrite">
	<small>public static</small> overwrite( <small>array</small> <span class="param" title="Master array">$array1</span> , <small>array</small> <span class="param" title="Input arrays that will overwrite existing values">$array2</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Overwrites an array with values from input arrays.
Keys that do not exist in the first array will not be added!</p>

<pre><code>$a1 = array('name' =&gt; 'john', 'mood' =&gt; 'happy', 'food' =&gt; 'bacon');
$a2 = array('name' =&gt; 'jack', 'food' =&gt; 'tacos', 'drink' =&gt; 'beer');

// Overwrite the values of $a1 with $a2
$array = Arr::overwrite($a1, $a2);

// The output of $array will now be:
array('name' =&gt; 'jack', 'mood' =&gt; 'happy', 'food' =&gt; 'tacos')
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array1</strong>
<small>required</small> - Master array</li>
<li>
<code>array</code>
<strong>$array2</strong>
<small>required</small> - Input arrays that will overwrite existing values</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function overwrite($array1, $array2)
{
	foreach (array_intersect_key($array2, $array1) as $key =&gt; $value)
	{
		$array1[$key] = $value;
	}

	if (func_num_args() &gt; 2)
	{
		foreach (array_slice(func_get_args(), 2) as $array2)
		{
			foreach (array_intersect_key($array2, $array1) as $key =&gt; $value)
			{
				$array1[$key] = $value;
			}
		}
	}

	return $array1;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="path">
	<small>public static</small> path( <small>array</small> <span class="param" title="Array to search">$array</span> , <small>mixed</small> <span class="param" title="Key path string (delimiter separated) or array of keys">$path</span> [, <small>mixed</small> <span class="param" title="Default value if the path is not set">$default</span> <small>= <small>NULL</small></small> , <small>string</small> <span class="param" title="Key path delimiter">$delimiter</span> <small>= <small>NULL</small></small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Gets a value from an array using a dot separated path.</p>

<pre><code>// Get the value of $array['foo']['bar']
$value = Arr::path($array, 'foo.bar');
</code></pre>

<p>Using a wildcard "*" will search intermediate arrays and return an array.</p>

<pre><code>// Get the values of "color" in theme
$colors = Arr::path($array, 'theme.*.color');

// Using an array of keys
$colors = Arr::path($array, array('theme', '*', 'color'));
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - Array to search</li>
<li>
<code>mixed</code>
<strong>$path</strong>
<small>required</small> - Key path string (delimiter separated) or array of keys</li>
<li>
<code>mixed</code>
<strong>$default</strong>
<small> = <small>NULL</small></small> - Default value if the path is not set</li>
<li>
<code>string</code>
<strong>$delimiter</strong>
<small> = <small>NULL</small></small> - Key path delimiter</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>mixed</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function path($array, $path, $default = NULL, $delimiter = NULL)
{
	if ( ! Arr::is_array($array))
	{
		// This is not an array!
		return $default;
	}

	if (is_array($path))
	{
		// The path has already been separated into keys
		$keys = $path;
	}
	else
	{
		if (array_key_exists($path, $array))
		{
			// No need to do extra processing
			return $array[$path];
		}

		if ($delimiter === NULL)
		{
			// Use the default delimiter
			$delimiter = Arr::$delimiter;
		}

		// Remove starting delimiters and spaces
		$path = ltrim($path, &quot;{$delimiter} &quot;);

		// Remove ending delimiters, spaces, and wildcards
		$path = rtrim($path, &quot;{$delimiter} *&quot;);

		// Split the keys by delimiter
		$keys = explode($delimiter, $path);
	}

	do
	{
		$key = array_shift($keys);

		if (ctype_digit($key))
		{
			// Make the key an integer
			$key = (int) $key;
		}

		if (isset($array[$key]))
		{
			if ($keys)
			{
				if (Arr::is_array($array[$key]))
				{
					// Dig down into the next part of the path
					$array = $array[$key];
				}
				else
				{
					// Unable to dig deeper
					break;
				}
			}
			else
			{
				// Found the path requested
				return $array[$key];
			}
		}
		elseif ($key === &#039;*&#039;)
		{
			// Handle wildcards

			$values = array();
			foreach ($array as $arr)
			{
				if ($value = Arr::path($arr, implode(&#039;.&#039;, $keys)))
				{
					$values[] = $value;
				}
			}

			if ($values)
			{
				// Found the values requested
				return $values;
			}
			else
			{
				// Unable to dig deeper
				break;
			}
		}
		else
		{
			// Unable to dig deeper
			break;
		}
	}
	while ($keys);

	// Unable to find the value requested
	return $default;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="pluck">
	<small>public static</small> pluck( <small>array</small> <span class="param" title="List of arrays to check">$array</span> , <small>string</small> <span class="param" title="Key to pluck">$key</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Retrieves muliple single-key values from a list of arrays.</p>

<pre><code>// Get all of the "id" values from a result
$ids = Arr::pluck($result, 'id');
</code></pre>

<p class="note">A list of arrays is an array that contains arrays, eg: array(array $a, array $b, array $c, ...)</p>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>array</code>
<strong>$array</strong>
<small>required</small> - List of arrays to check</li>
<li>
<code>string</code>
<strong>$key</strong>
<small>required</small> - Key to pluck</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function pluck($array, $key)
{
	$values = array();

	foreach ($array as $row)
	{
		if (isset($row[$key]))
		{
			// Found a value in this row
			$values[] = $row[$key];
		}
	}

	return $values;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="range">
	<small>public static</small> range( [ <small>integer</small> <span class="param" title="Stepping">$step</span> <small>= <small>integer</small> 10</small> , <small>integer</small> <span class="param" title="Ending number">$max</span> <small>= <small>integer</small> 100</small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Fill an array with a range of numbers.</p>

<pre><code>// Fill an array with values 5, 10, 15, 20
$values = Arr::range(5, 20);
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>integer</code>
<strong>$step</strong>
<small> = <small>integer</small> 10</small> - Stepping</li>
<li>
<code>integer</code>
<strong>$max</strong>
<small> = <small>integer</small> 100</small> - Ending number</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function range($step = 10, $max = 100)
{
	if ($step &lt; 1)
		return array();

	$array = array();
	for ($i = $step; $i &lt;= $max; $i += $step)
	{
		$array[$i] = $i;
	}

	return $array;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="set_path">
	<small>public static</small> set_path( <small>array</small> <small><abbr title="passed by reference">&</abbr></small> <span class="param" title="Array to update">$array</span> , <small>string</small> <span class="param" title="Path">$path</span> , <small>mixed</small> <span class="param" title="Value to set">$value</span> [, <small>string</small> <span class="param" title="Path delimiter">$delimiter</span> <small>= <small>NULL</small></small> ] )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Set a value on an array by path.</p>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>byref array</code>
<strong>$array</strong>
<small>required</small> - Array to update</li>
<li>
<code>string</code>
<strong>$path</strong>
<small>required</small> - Path</li>
<li>
<code>mixed</code>
<strong>$value</strong>
<small>required</small> - Value to set</li>
<li>
<code>string</code>
<strong>$delimiter</strong>
<small> = <small>NULL</small></small> - Path delimiter</li>
</ul>

<h4>Tags</h4>
<ul class="tags">
<li>See - Arr::path()</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function set_path( &amp; $array, $path, $value, $delimiter = NULL)
{
	if ( ! $delimiter)
	{
		// Use the default delimiter
		$delimiter = Arr::$delimiter;
	}

	// Split the keys by delimiter
	$keys = explode($delimiter, $path);

	// Set current $array to inner-most array path
	while (count($keys) &gt; 1)
	{
		$key = array_shift($keys);

		if (ctype_digit($key))
		{
			// Make the key an integer
			$key = (int) $key;
		}

		if ( ! isset($array[$key]))
		{
			$array[$key] = array();
		}

		$array = &amp; $array[$key];
	}

	// Set key on inner-most array
	$array[array_shift($keys)] = $value;
}</code></pre>
</div>

</div>
<div class="method">

<h3 id="unshift">
	<small>public static</small> unshift( <small>array</small> <small><abbr title="passed by reference">&</abbr></small> <span class="param" title="Array to modify">$array</span> , <small>string</small> <span class="param" title="Array key name">$key</span> , <small>mixed</small> <span class="param" title="Array value">$val</span> )
	<small>(defined in <a href="/3.2/guide/api/Kohana_Arr">Kohana_Arr</a>)</small>
</h3>

<div class="description">
<p>Adds a value to the beginning of an associative array.</p>

<pre><code>// Add an empty value to the start of a select list
Arr::unshift($array, 'none', 'Select a value');
</code></pre>
</div>

<h4>Parameters</h4>
<ul>
<li>
<code>byref array</code>
<strong>$array</strong>
<small>required</small> - Array to modify</li>
<li>
<code>string</code>
<strong>$key</strong>
<small>required</small> - Array key name</li>
<li>
<code>mixed</code>
<strong>$val</strong>
<small>required</small> - Array value</li>
</ul>


<h4>Return Values</h4>
<ul class="return">
<li><code>array</code></li>
</ul>

<div class="method-source">
<h4>Source Code</h4>
<pre><code>public static function unshift( array &amp; $array, $key, $val)
{
	$array = array_reverse($array, TRUE);
	$array[$key] = $val;
	$array = array_reverse($array, TRUE);

	return $array;
}</code></pre>
</div>

</div>
</div>

										<div id="disqus_thread" class="clear"></div>
					<script type="text/javascript">
						var disqus_identifier = 'guide/api/Arr';
						(function() {
							var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
							dsq.src = 'http://kohana.disqus.com/embed.js';
							(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
							})();
					</script>
					<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript=kohana"> comments powered by Disqus.</a></noscript>
					<a href="http://disqus.com" class="dsq-brlink">Documentation comments powered by <span class="logo-disqus">Disqus</span></a>
									</div>
			</div>
		</div>
	</div>

	<div id="footer">
		<div class="container">
			<div class="span-12">
							&nbsp;
						</div>
			<div class="span-12 last right">
			<p>Powered by <a href="http://kohanaframework.org/">Kohana</a> v3.2.0</p>
			</div>
		</div>
	</div>

<script type="text/javascript">
//<![CDATA[
(function() {
	var links = document.getElementsByTagName('a');
	var query = '?';
	for(var i = 0; i < links.length; i++) {
	if(links[i].href.indexOf('#disqus_thread') >= 0) {
		query += 'url' + i + '=' + encodeURIComponent(links[i].href) + '&';
	}
	}
	document.write('<script charset="utf-8" type="text/javascript" src="http://disqus.com/forums/kohana/get_num_replies.js' + query + '"></' + 'script>');
})();
//]]>
</script>
</body>
</html>
";